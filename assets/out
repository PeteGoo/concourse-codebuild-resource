#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

sources=$1

if [ -z "$sources" ]; then
  echo "usage: $0 <path/to/sources>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/codebuild-resource-request.XXXXXX)

cat > $payload <&0

project=$(jq -r '.source.project // ""' < $payload)
region=$(jq -r '.source.region // ""' < $payload)
role_arn=$(jq -r '.source.role_arn // ""' < $payload)
env_var_overrides=$(jq -r '.params.env_var_overrides // []' < $payload)
source_version=$(jq -r '.params.source_version // ""' < $payload)
source_version_file=$(jq -r '.params.source_version // ""' < $payload)
build_input_file=$(jq -r '.params.build_input_file // ""' < $payload)

if [ -z "$region" ]; then
    region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r)
fi

export AWS_REGION=$region
export AWS_DEFAULT_REGION=$region

if [ -n "$role_arn" ]; then
  assume_role "$role_arn"
fi

if [ -n "$build_input_file" ]; then
    # Build input has been supplied in a file
    cp $build_input_file > /tmp/build_input.json
else
    # We need to create the build input file
    build_input=$(jq -n "{
        \"projectName\": \"$project\", 
        \"environmentVariablesOverride\": $env_var_overrides
    }")

    # Get the source version from a file if specified
    if [ -n "$source_version_file" ]; then
        source_version=$(cat $source_version_file)
    fi

    # Add the source version if we have one
    if [ -n "$source_version" ]; then
        build_input=$(echo $build_input | jq --arg sourceVersion "$source_version" '. + {sourceVersion: $sourceVersion}')
    fi

    echo $build_input > /tmp/build_input.json
fi

echo "Starting to build project $project"
BUILD_ID=$(aws codebuild start-build --query 'build.id' --output text --region "$region" --cli-input-json file:///tmp/build_input.json)
echo "Started build $BUILD_ID"

# The log group is typically not ready right away
sleep 2

# Kick off the log streaming in the background
watch_build_logs "$BUILD_ID" &
LOG_PID=$!

# Wait for the codebuild to report as anything but IN_PROGRESS
wait_for_build_to_finish "$BUILD_ID"
echo "Build job has finished"

echo "Killing the logging job with PID $LOG_PID"

kill -9 $LOG_PID
killall awslogs

jq -n "{
  version: {
    ref: $(echo $BUILD_ID | jq -R .)
  },
  metadata: [
    { name: \"project\", value: \"$project\" }
  ]
}" >&3
