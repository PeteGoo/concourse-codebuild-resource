#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/codebuild-resource-request.XXXXXX)

cat > $payload <&0

project=$(jq -r '.source.project // ""' < $payload)
role_arn=$(jq -r '.source.role_arn // ""' < $payload)
region=$(jq -r '.source.region // ""' < $payload)
build_id=$(jq -r '.version.ref // "HEAD"' < $payload)

download_artifacts=$(jq -r '(.params.submodules // "true")' < $payload)

if [ -z "$region" ]; then
    region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r)
fi

export AWS_REGION=$region
export AWS_DEFAULT_REGION=$region

if [ -n "$role_arn" ]; then
  assume_role "$role_arn"
fi

build=$(aws codebuild batch-get-builds --ids "$build_id" --query 'builds[0]')

if [ "$build" == null ]; then
    echo "The build ${build_id} could not be found"
fi

if [ "$download_artifacts" == "true" ]; then
    mkdir -p "${destination}/artifacts"
    artifact_location=$(echo $build | jq -r '.artifacts.location')
    if [ -n "$artifact_location" ]; then
        s3_path=$(echo $artifact_location | cut -d : -f 6)
        echo "Syncing artifacts from \"s3://${s3_path}\" to \"${destination}/artifacts\""
        aws s3 sync "s3://${s3_path}" "${destination}/artifacts"
    fi
fi

aws codebuild batch-get-builds --ids "$build_id" --query 'builds[0]' \
  | jq -s 'map({ version: { ref: .id }, metadata: []})' >&3