#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/codebuild-resource-request.XXXXXX)

cat > $payload <&0

project=$(jq -r '.source.project // ""' < $payload)
role_arn=$(jq -r '.source.role_arn // ""' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)

download_artifacts=$(jq -r '(.params.submodules // "true")' < $payload)

if [ -n "$role_arn" ]; then
  assume_role "$role_arn"
fi

build=$(aws codebuild batch-get-builds --ids "$ref" | jq '.builds[0]')

if [ "$build" == null ]; then
    echo "The build ${ref} could not be found"
fi

if [ "$download_artifacts" == "true" ]; then
    mkdir -p "${destination}/artifacts"
    artifact_location=$(echo $build | jq '.artifacts.location')
    if [ -n "$artifact_location" ]; then
        aws s3 sync "$artifact_location" "${destination}/artifacts"
    fi
fi

{
    set -f
    echo $BUILD
    set +f
} | jq -s 'map({ref: .id, metadata: [{ name: "source-version", value: .sourceVersion}]})'